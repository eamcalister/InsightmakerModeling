<?xml version='1.0' encoding='utf-8'?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="Sec1_2_insightmaker_model_examples">
	<title>Some Examples</title>

  <objectives>
		<ul>
	  		<li>
	  			<p>
				Explore both the ODEs from the last section and several modeling examples. 
	  			</p>
	  		</li>
			<li>
				<p>
				Discuss simulation and display settings in Insightmaker.	
				</p>
			</li>

	  	</ul>
  </objectives>

<example xml:id="Exp_Insight_Example"><title>Malthusian (Exponential) Growth</title>
	<p>
	Here we will consider the example given by <xref ref="Exp_as_IVP"/>, but add some context so that we can use more of the features of Insightmaker. Here is the set up for the problem: <em> A population of creatures is initially <m>10</m> and grows exponentially. If the population is <m>20</m> after three weeks, what will the population be in one year?</em>
	</p>
	<solution><title>Calculus Class Version</title>
	<p>
	First we will give the standard formulation and solution using Calculus. The problem may be reformulated as the IVP
	<me>
		P' = kP, P(0) = 10,
	</me>
	where <m>P</m> represents the number of creatures, the independent variable is <m>t = </m> time in weeks, and <m>k</m> is the continuous percent growth rate in units of <m>\frac{1}{\text{weeks}}</m>. We can then observe (by whatever technique you prefer) that the general solution is given by 
	<me>
		P(t) = 10e^{kt}.
	</me>
	Using the data point <m>P(3) = 20</m>, we find <m>k = \frac{\ln(2)}{3}\approx 0.23</m>. Thus, <m>P(52) \approx 10e^{0.23\cdot 52} \approx 165,140</m> creatures. <alert>However, this solution isn't the point of this text!</alert> We are only including it to reference the result. 
	</p>
	</solution>
	<solution><title>Using Insightmaker</title>
	<p>
	The Insight that we will use to solve this problem is below
	<interactive xml:id="Malthusian-Example-Insight" iframe="https://insightmaker.com/insight/2Yd7izSdPu4DhoalPCmI4g/embed?topBar=1;sideBar=1;zoom=1" width = "85%"/>
	</p>
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
		Two features we will use in this solution are having sliders linked and using the tabular output option. To show the output of the simulation as a table instead of the graph of a function, use the configuration button in the simulation window and choose "table" as indicated in the image to the right.
		</p>
		<p></p>
		<image source="images/TableButton.png" width="40%"><description>
			<p>
			Choosing the tabular output option.
			</p>
		</description></image>	
	</sidebyside>
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
		Upon scrolling through the table with <m>k=0.1</m>, we find <m>P(3) \approx 13.5</m>. Thus, <m>k</m> is too small.
		</p>
		<p></p>
		<image source="images/Exp_kequalspoint1.png" width="40%"><description>
			<p>
			Output at <m>t=3</m> when <m>k=0.1</m>.
			</p>
		</description></image>	
	</sidebyside>
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
		Adjusting the slider for <m>k</m> until we have <m>P(3)\approx 20</m>, we see the correct value of <m>k</m> is about <m>0.23</m>. If we adjust the step size in the slider below <m>0.01</m>, we can opbtain a more accurate value. 
		</p>
		<p></p>
		<image source="images/Exp_kequalspoint23.png" width="40%"><description>
			<p>
			Output at <m>t=3</m> when <m>k=0.23</m>.
			</p>
		</description></image>	
	</sidebyside>

	</solution>

</example>

<p>
	Now is a good time to discuss the simulation settings in Insightmaker. You get to these by clicking the "Settings" button in the top toolbar.
</p>

<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
	<p>
		The first important settings are the <em>Basic Simulation Settings</em>. These include the following:
		<ul>
			<li>
				<p>
					<term>Simulation Start:</term> This is the time value at the start of the simulation, which is the time value indicated by the initial value problem (<m>t_0</m> in <xref ref="def-DE"/>).
				</p>
			</li>
			<li>
				<p>
					<term>Simulation Length:</term> This is how long the simulation will run. If you are interested in the value of a stock at some specific time after the start time, you may use the difference between the specified time and the start time as the simulation length.
				</p>
			</li>
			<li>
				<p>
					<term>Time Units:</term> This is the unit of time. For example, if Seconds are chosen, then <m>t=1</m> means <m>1</m> second.
				</p>
			</li>
		</ul>
	</p><p></p>
	<image source="images/BasicTimeSettings.png" width="40%"><description>
		<p>
		Basic Simulation Settings
		</p>
	</description></image>
	
	</sidebyside>

	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
			Two more important settings are the <em>Advanced Simulation Settings</em>. These include the following:
			<ul>
				<li>
					<p>
						<term>Simulation Time Step:</term> Insightmaker simulations use numerical methods to approximate values of stocks as functions of time. The outputs are only approximated at discrete time values starting with the simulation start time and moving in the positive direction in increments of this step size. A smaller time step updates the approximation more frequently and is thus more accurate. However, smaller time steps take more computations and hence run slower.
					</p>
				</li>
			</ul>
		</p><p></p>
		<image source="images/TimeStepandAlgorithm.png" width="40%"><description>
			<p>
			Basic Simulation Settings
			</p>
		</description></image>
		
		</sidebyside>
<ul>
	<li>
		<p>
			<term>Simulation Algorithm:</term> The algorithms available for simulation with Insightmaker are Euler's Method and the 4th Order Runge-Kutta Method (RK4). Euler's Method uses the ODE to compute the slope at each point and follows a linear approximation to <m>y</m> for one time step, then repeats. The RK4 Method is more complicated and its description is beyond the scope of this text. 
		</p>
		<p>
			The primary differences between the two is accuracy vs. speed. Euler's Method is what is known as a <em>first order</em> method, which means error decreases linearly with the step size. In other words, if you cut the time step in half, the error is Euler's Method will also be (approximately) cut in half. The RK4 Method is a 4th order method, so the error is approximately proportional to the step size to the 4th power, i.e. if you cut the time step in half, the error will be (approximately) multiplied by <m>1/16</m>.
		</p>
	</li>
</ul>

<example xml:id="Settings_Exploration"><title>Exploration of Settings</title>
	<p>
		In this example we will explore the simulation algorithm and step size settings in the context of the exponential growth model <xref ref="Exp_Insight_Example"/>, but with initial value <m>P(0)=1</m> and <m>k=1</m>. This yields <m>P(t) = e^t</m>, so we know that <m>P(1) = e\approx 2.718</m>. Running the simulation using Euler's Method with a time step of <m>1</m>, we obtain the following graph:
	</p>
	<figure xml:id="ExpEulerGraph">
		<caption>The solution given by Euler's Method with a time step of <m>0.5</m>. The black points are added to show the discrete slopes between the outputs.</caption>
		<image source="images/ExpEuler1.png">
		</image>
	</figure>
	<p>
		To explore how the error at <m>t=1</m> changes with the step size, we will note that <m>P(1) = e</m> and use the tabular output.
	</p>
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
			When the time step is <m>0.5</m>, the error at <m>t=1</m> is <m>|e-2.25|\approx 0.468</m>.
		</p>
		<p></p><p>
			<image source="images/Euler1Table.png" width="40%"><description>
				<p>
				Tabular output when the time step is <m>0.5</m> using Euler's Method.
				</p>
			</description></image>
		</p>
	</sidebyside>	
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
			When the time step is <m>0.25</m>, the error at <m>t=1</m> is <m>|e-2.2.44140625|\approx 0.2769</m>. This is <em>about</em> half of the previous error.
		</p>
		<p></p><p>
			<image source="images/Euler2Table.png" width="40%"><description>
				<p>
				Tabular output when the time step is <m>0.25</m> using Euler's Method.
				</p>
			</description></image>
		</p>
	</sidebyside>
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
			When the time step is <m>0.125</m>, the error at <m>t=1</m> is <m>|e-2.56578451|\approx 0.1525</m>. Again, this is <em>about</em> half of the previous error.
		</p>
		<p></p><p>
			<image source="images/Euler3Table.png" width="40%"><description>
				<p>
				Tabular output when the time step is <m>0.125</m> using Euler's Method.
				</p>
			</description></image>
		</p>
	</sidebyside>
	<sidebyside widths="60% 5% 35%" margins="auto" valign="top">
		<p>
			Finally, when the time step is <m>0.5</m> and we instead use the 4th Order Runge-Kutta algorithm, the error at <m>t=1</m> is <m>|e-2.71734619|\approx 0.001</m>.  
		</p>
		<p></p><p>
			<image source="images/ExpRK4Table.png" width="40%"><description>
				<p>
				Tabular output when the time step is <m>0.5</m> using RK4.
				</p>
			</description></image>
		</p>
	</sidebyside>
</example>

<example xml:id="Circle_as_System_Insight_Example"><title>The Circular Functions as Solutions to a System</title>
	<p>
		Here we will explore the system of ODEs introduced in <xref ref="Circle_as_System"/> to show the scatter plot (phase plane) display setting and revisit the choice of simulation algorithm. The Insight used here can be found at <url href="https://insightmaker.com/insight/1MtQzhS6qx9B0SbVnmFs27" visual="circular function insight" />. Choosing the RK4 simulation algortithm with a step size of <m>0.1</m>, we obtain the following time series graphs for <m>x</m> and <m>y</m> as functions of <m>t</m>. In this we see a nice match for the exact analytic solutions <m>x(t) = \cos(t)</m> and <m>y(t) = \sin(t)</m>.
	</p>
	<figure xml:id="circular_time_series">
		<caption>The solutions for <m>x</m> and <m>y</m> as time series for the system of differential IVPs given by <xref ref="Circle_as_System"/>.</caption>
		<image source="images/circular_time_series.png">
		</image>
	</figure>
	<p>
		In the case of systems of differential equations we are often interested more in the way the dependent variables vary with each other as much as (or more than) how they vary individually with time. So see this we use the scatter plot configuration in the simulation window's configuration settings. We choose "show lines" and turn off "show points" to display the following:
	</p>
	<figure xml:id="circular_scatter1">
		<caption>The solutions for <m>x</m> and <m>y</m> plotted together for the system of differential IVPs given by <xref ref="Circle_as_System"/>.</caption>
		<image source="images/circular_scatter1.png">
		</image>
	</figure>
	<p>
		Finally, to again illustrate the accuracy difference between Euler's Method and RK4, we show the result of the same simulation using Euler's Method: 
	</p>
	<figure xml:id="circular_scatter2">
		<caption>The solutions for <m>x</m> and <m>y</m> plotted together for the system of differential IVPs given by <xref ref="Circle_as_System"/> using Euler's Method.</caption>
		<image source="images/circular_scatter2.png">
		</image>
	</figure>
	<p>
		We see the outward spiral because Euler's Method repeatedly follows lines tangent to the circle, which moves us further and further from the origin.
	</p>
</example>

<p>
	In the next example we consider the time it takes for an ant to build a tunnel of length <m>x</m>. This scenario is presented in <xref ref="ant-tunneling"/> as well as Project 1.6.3 in <xref ref="SIMIODE-text"/>. The approach presented here is specific to Insightmaker and is meant to help us understand how to build models of the real world; our examples so far have been more of an abstract mathematical nature.
</p>

<example xml:id="Ant_Tunneling"><title>Ant Tunneling</title>
	<p>
		Suppose that we have a mound of dirt of unknown size and we wish to tunnel through this mound. We will make the choice of a single stock, <m>V</m>, the volume of dirt removed from the mound in cubic centimeters. This will also be a good proxy for the length of the tunnel. The initial value for <m>V</m> should be <m>V(0) = 0</m>.
	</p>
	<p>
		Now we will build our variables. There are certainly many ways to proceed and what follows is just one:
		<ul>
			<li>
				<p>
					Let <m>r</m> be the radius of the tunnel (assuming its shape is cylindrical and straight) in cm. 
				</p>
			</li>
			<li>
				<p>
					Let <m>x</m> be the length of the tunnel, in cm, at time of <m>t</m> seconds. This is computable as <m>x = \dfrac{V}{\pi r^2}</m>.
				</p>
			</li>
			<li>
				<p>
					Let <m>k_{\text{scrape}}</m> be the rate in <m>\text{cm}^3/\text{s}</m> that we can remove (scrape) dirt from the end of the tunnel. 
				</p>
			</li>
			<li>
				<p>
					The main issue that makes the flow rate of <m>V</m> depend on <m>V</m> is that dirt scraped from the end of the tunnel must then be removed from the tunnel. We will assume that the velocity at which a volume <m>\Delta{V}</m> of dirt can be moved is inversely proportional to <m>\Delta{V}</m>. That is 
					<me>
						\text{velocity at which }\Delta{V}\text{ can be moved} = \frac{k_{\text{move}}}{\Delta{V}}
					</me>
					for some constant <m>k_{\text{move}}</m>. (Think about how plausible this is.)
				</p>
			</li>
		</ul>
	</p>
	<p>
		Now we can create links and flows. 
		<ul>
			<li>
				<p>
					We should have one flow into <m>V</m>. Clearly, <m>k_{\text{scrape}}</m> and <m>k_{\text{move}}</m> should be linked to this flow. Since the flow rate will depend on the length of the tunnel, we should also have a link from <m>x</m> to this flow. 
				</p>
			</li>
			<li>
				<p>
					Because <m>x</m> is computed from <m>V</m> and <m>r</m>, there should be links pointing from <m>V</m> and <m>r</m> to <m>x</m>.
				</p>
			</li>
		</ul>
		At this point we have the following diagram:
		<figure xml:id="AntTunnelDiagram">
			<caption>The diagram of dependencies for the ant tunneling problem.</caption>
			<image source="images/AntTunnelInsight.png" width="70%"></image>
		</figure>
	</p>
	<p>
		Now we can derive the formula for the flow rate into <m>V</m>. Observe that for a small change in volume, <m>\Delta{V}</m>, the time it takes to remove that volume is given by
		<me>
			\Delta{t} = \frac{\Delta{V}}{k_{\text{scrape}}} + \frac{x}{k_{\text{move}}/\Delta{V}}.
		</me>
		A little algebra and taking the limit as <m>\Delta{V}\to 0</m> then yields
		<me>
			\frac{dV}{dt} = \frac{1}{\frac{1}{k_{\text{scrape}}} + \frac{x}{k_{\text{move}}}}.
		</me>
		We would enter this into the formula for the flow as <code>1/(1/[k_scrape]+[x]/([k_move]))</code>.
		Observe that for finding the analytic solution to this ODE, we would write it as 
		<me>
			\frac{dV}{dt} = \frac{1}{\frac{1}{k_{\text{scrape}}} + \frac{V}{k_{\text{move}}\pi r^2}}.
		</me>	
	</p>
	<p>
	Finally, we can add one more item so that we can graph the solution to the problem posed in the original SIMIODE scenario. That is, we wish to graph the time <m>T(x)</m> to tunnel <m>x</m> cm as a function of <m>x</m>. So far we have <m>x</m> as a function of time. To do this we create time as a stock, with initial value zero, and flow rate <m>1</m>. Now running the simulation in scatter plot format with the new time stock on the vertical axis and <m>x</m> on the horizontal gives us the desired graph. A complete Insight is given below (with several variables set arbitrarily at one).	
	</p>
	<p>
		<interactive xml:id="Ant-Tunneling-Insight" iframe="https://insightmaker.com/insight/1Zu4Hbs8F4258DG73eqNbj/embed?topBar=1;sideBar=1;zoom=1" width = "85%"/>
	</p>

</example>

<exercise>
	<p>
	Based on the results of the above simulation, is it better to have one ant dig the entire tunnel or have two ants start at opposite ends and meet in the middle?
	</p>
</exercise>

<remark>
	<p>
		The Insightmaker model construction in <xref ref="Ant_Tunneling"/> may seem to be built in a somewhat <em>ad hoc</em> way. In <xref ref="Intro_dimensional_analysis"/> and <xref ref="First_Order_Scenarios"/> we will try to make model building more systematic. However, keep in mind that modeling is a creative endeavor; there isn't an easy "build a model" algorithm.
	</p>
</remark>

</section>
